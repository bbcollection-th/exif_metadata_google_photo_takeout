#!/usr/bin/env python3
"""
Script de d√©monstration du syst√®me de d√©couverte et validation des champs EXIF.

Ce script illustre l'utilisation compl√®te du workflow :
1. D√©couverte automatique des champs depuis les fichiers JSON
2. Validation de la configuration g√©n√©r√©e
3. Nettoyage et optimisation
4. Int√©gration avec le syst√®me de configuration

Usage:
    python demo_discovery.py /path/to/google/photos/folder
"""

import json
import argparse
from pathlib import Path
import tempfile
import sys
import os

# Ajouter le r√©pertoire src au path pour les imports
current_dir = Path(__file__).parent
src_dir = current_dir / "src"
if src_dir.exists():
    sys.path.insert(0, str(src_dir))

def main():
    parser = argparse.ArgumentParser(
        description="D√©monstration compl√®te du syst√®me de d√©couverte EXIF"
    )
    parser.add_argument(
        "google_photos_dir",
        type=Path,
        help="R√©pertoire contenant les fichiers JSON Google Photos"
    )
    parser.add_argument(
        "--keep-temp",
        action="store_true",
        help="Garder les fichiers temporaires pour inspection"
    )
    
    args = parser.parse_args()
    
    if not args.google_photos_dir.exists():
        print(f"‚ùå R√©pertoire introuvable : {args.google_photos_dir}")
        return 1
    
    print("üöÄ D√âMONSTRATION DU SYST√àME DE D√âCOUVERTE EXIF")
    print("=" * 60)
    
    # √âtape 1: D√©couverte automatique
    print("\nüì° √âTAPE 1: D√©couverte automatique des champs...")
    
    # Fichier temporaire pour la config d√©couverte
    temp_dir = Path(tempfile.mkdtemp()) if args.keep_temp else Path(tempfile.mkdtemp())
    discovered_config = temp_dir / "discovered_config.json"
    
    # Lancer la d√©couverte
    discover_cmd = f'python discover_fields.py "{args.google_photos_dir}" --output "{discovered_config}" --summary'
    print(f"   Commande: {discover_cmd}")
    
    os.system(discover_cmd)
    
    if not discovered_config.exists():
        print("‚ùå √âchec de la d√©couverte")
        return 1
    
    # Statistiques de d√©couverte
    with open(discovered_config, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    mappings_count = len(config.get('metadata_mappings', {}))
    print(f"   ‚úÖ {mappings_count} champs d√©couverts")
    
    # √âtape 2: Validation
    print("\n‚úÖ √âTAPE 2: Validation de la configuration...")
    
    validate_cmd = f'python validate_config.py "{discovered_config}" --verbose'
    print(f"   Commande: {validate_cmd}")
    
    os.system(validate_cmd)
    
    # √âtape 3: Nettoyage
    print("\nüßπ √âTAPE 3: Nettoyage et optimisation...")
    
    cleaned_config = temp_dir / "cleaned_config.json"
    clean_cmd = f'python validate_config.py "{discovered_config}" --clean --min-frequency 3 --output "{cleaned_config}"'
    print(f"   Commande: {clean_cmd}")
    
    os.system(clean_cmd)
    
    if cleaned_config.exists():
        with open(cleaned_config, 'r', encoding='utf-8') as f:
            clean_config = json.load(f)
        
        clean_mappings_count = len(clean_config.get('metadata_mappings', {}))
        reduction = ((mappings_count - clean_mappings_count) / mappings_count) * 100
        print(f"   ‚úÖ R√©duction: {mappings_count} ‚Üí {clean_mappings_count} champs ({reduction:.1f}%)")
    
    # √âtape 4: D√©mo d'int√©gration
    print("\nüîó √âTAPE 4: D√©monstration d'int√©gration...")
    
    # Copier la config nettoy√©e vers le fichier principal
    main_config = current_dir / "exif_mapping_config.json"
    if cleaned_config.exists():
        import shutil
        shutil.copy2(cleaned_config, main_config)
        print(f"   ‚úÖ Configuration copi√©e vers : {main_config}")
    
    # Test de chargement avec config_loader
    try:
        sys.path.insert(0, str(current_dir / "src" / "google_takeout_metadata"))
        from config_loader import ConfigLoader
        
        loader = ConfigLoader()
        loaded_config = loader.load_config()
        
        print("   ‚úÖ Configuration charg√©e avec succ√®s")
        print(f"   üìä Strat√©gies disponibles: {list(loaded_config.get('strategies', {}).keys())}")
        print(f"   üìä Mappings charg√©s: {len(loaded_config.get('metadata_mappings', {}))}")
        
    except ImportError as e:
        print(f"   ‚ö†Ô∏è Module config_loader non trouv√©: {e}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erreur lors du chargement: {e}")
    
    # R√©sum√© final
    print("\nüéØ R√âSUM√â FINAL")
    print("=" * 60)
    print("‚úÖ D√©couverte automatique des champs r√©ussie")
    print("‚úÖ Validation et nettoyage effectu√©s")
    print("‚úÖ Configuration pr√™te pour utilisation")
    
    if args.keep_temp:
        print(f"\nüìÅ Fichiers temporaires conserv√©s dans : {temp_dir}")
        print("   - discovered_config.json : Configuration brute")
        print("   - cleaned_config.json : Configuration nettoy√©e")
    else:
        # Nettoyage des fichiers temporaires
        import shutil
        shutil.rmtree(temp_dir)
        print("üßπ Fichiers temporaires supprim√©s")
    
    print("\nüöÄ Pr√™t pour traiter vos photos Google !")
    
    return 0

if __name__ == "__main__":
    exit(main())
