"""Interface en ligne de commande."""

from __future__ import annotations

import argparse
import logging
import shutil
import sys
from pathlib import Path

from .processor import process_directory
from .processor_batch import process_directory_batch
from .statistics import ProcessingStats
import google_takeout_metadata.statistics as stats_module

def main(argv: list[str] | None = None) -> None:
    parser = argparse.ArgumentParser(description="Fusionner les m√©tadonn√©es Google Takeout dans les images")
    parser.add_argument("path", type=Path, help="R√©pertoire √† analyser r√©cursivement")
    parser.add_argument(
        "--localtime", action="store_true",
        help="Convertir les horodatages en heure locale au lieu de l'UTC (par d√©faut : UTC)"
    )
    parser.add_argument(
        "--overwrite", action="store_true",
        help="Autoriser l'√©crasement des champs de m√©tadonn√©es existants (par d√©faut, les m√©tadonn√©es existantes sont pr√©serv√©es)"
    )
    parser.add_argument(
        "--immediate-delete", action="store_true",
        help="Mode destructeur: supprimer imm√©diatement les sidecars JSON apr√®s succ√®s (par d√©faut: mode s√©curis√© avec pr√©fixe OK_)"
    )
    parser.add_argument(
        "--organize-files", action="store_true",
        help="Organiser les fichiers selon leur statut: d√©placer les fichiers archiv√©s vers '_Archive' et supprim√©s vers '_Corbeille'"
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="Activer les logs d√©taill√©s (niveau DEBUG)"
    )
    parser.add_argument(
        "--batch", action="store_true",
        help="Traiter les fichiers par lots"
    )
    args = parser.parse_args(argv)

    # Configuration du logging avec le niveau appropri√©
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=log_level, 
        format="%(asctime)s - %(levelname)s - %(message)s"
    )
    
    # Gestion de la compatibilit√© du syst√®me de s√©curit√©
    immediate_delete = args.immediate_delete
    
    if immediate_delete:
        logging.info("üî• Mode destructeur activ√© : les sidecars seront supprim√©s imm√©diatement apr√®s succ√®s")
    else:
        logging.info("üîê Mode s√©curis√© activ√© : les sidecars seront marqu√©s avec le pr√©fixe 'OK_' (d√©faut)")
    
    if not args.path.is_dir():
        logging.error("Le chemin indiqu√© n'est pas un r√©pertoire : %s", args.path)
        sys.exit(1)
    
    # R√©initialiser les statistiques pour cette ex√©cution (nouvelle instance)
    stats_module.stats = ProcessingStats()
    
    # Le mode par d√©faut est maintenant append_only=True (s√©curit√© par d√©faut)
    # L'option --overwrite permet d'√©craser les m√©tadonn√©es existantes
    append_only = not args.overwrite

    # V√©rifier que exiftool est disponible uniquement si on va traiter
    if shutil.which("exiftool") is None:
        logging.error("exiftool introuvable. Veuillez l'installer pour utiliser ce script.")
        sys.exit(1)

    if args.batch:
        process_directory_batch(args.path, use_localtime=args.localtime, append_only=append_only, immediate_delete=immediate_delete, organize_files=args.organize_files)
    else:
        process_directory(args.path, use_localtime=args.localtime, append_only=append_only, immediate_delete=immediate_delete, organize_files=args.organize_files)


if __name__ == "__main__":  # pragma: no cover - CLI entry
    main()
