"""Module de gestion des fichiers archiv√©s et supprim√©s selon les m√©tadonn√©es Google Takeout."""

from __future__ import annotations

import logging
import shutil
from pathlib import Path
from typing import Optional, Tuple

from .sidecar import SidecarData

logger = logging.getLogger(__name__)


class FileOrganizer:
    """Gestionnaire pour organiser les fichiers selon leur statut archive/corbeille."""
    
    def __init__(self, base_directory: Path):
        """
        Initialiser l'organisateur de fichiers.
        
        Args:
            base_directory: R√©pertoire de base o√π cr√©er les dossiers d'organisation
        """
        self.base_directory = Path(base_directory)
        self.archive_dir = self.base_directory / "_Archive"
        self.trash_dir = self.base_directory / "_Corbeille"
        self.locked_dir = self.base_directory / "_Verrouill√©"
    
    def ensure_directories(self) -> None:
        """Cr√©er les r√©pertoires d'organisation s'ils n'existent pas."""
        self.archive_dir.mkdir(exist_ok=True)
        self.trash_dir.mkdir(exist_ok=True)
        self.locked_dir.mkdir(exist_ok=True)
        logger.debug(f"R√©pertoires d'organisation cr√©√©s: {self.archive_dir}, {self.trash_dir}, {self.locked_dir}")
    
    def get_target_directory(self, meta: SidecarData) -> Optional[Path]:
        """
        D√©terminer le r√©pertoire cible selon le statut du fichier.
        
        Args:
            meta: M√©tadonn√©es du fichier
            
        Returns:
            Chemin du r√©pertoire cible ou None si aucun d√©placement n√©cessaire
            
        R√®gles de priorit√©:
        1. Si trashed=True -> Corbeille (priorit√© absolue)
        2. Si locked=True -> Dossier verrouill√© (priorit√© haute)
        3. Si archived=True -> Archive  
        4. Sinon -> None (pas de d√©placement)
        """
        if meta.trashed:
            return self.trash_dir
        elif meta.locked:
            return self.locked_dir
        elif meta.archived:
            return self.archive_dir
        else:
            return None
    
    def move_file_with_sidecar(
        self, 
        media_path: Path, 
        sidecar_path: Path, 
        meta: SidecarData
    ) -> Tuple[Optional[Path], Optional[Path]]:
        """
        D√©placer un fichier m√©dia et son sidecar selon le statut.
        
        Args:
            media_path: Chemin du fichier m√©dia
            sidecar_path: Chemin du fichier sidecar JSON
            meta: M√©tadonn√©es extraites du sidecar
            
        Returns:
            Tuple (nouveau_chemin_media, nouveau_chemin_sidecar) ou (None, None) si pas de d√©placement
            
        Raises:
            OSError: En cas d'erreur de d√©placement
        """
        target_dir = self.get_target_directory(meta)
        
        if target_dir is None:
            # Pas de d√©placement n√©cessaire
            return None, None
        
        # Cr√©er les r√©pertoires si n√©cessaire
        self.ensure_directories()
        
        # Calculer les nouveaux chemins
        new_media_path = target_dir / media_path.name
        new_sidecar_path = target_dir / sidecar_path.name
        
        # G√©rer les conflits de noms
        new_media_path = self._resolve_name_conflict(new_media_path)
        new_sidecar_path = self._resolve_name_conflict(new_sidecar_path)
        
        try:
            # D√©placer le fichier m√©dia
            if media_path.exists():
                shutil.move(str(media_path), str(new_media_path))
                logger.info(f"üìÅ D√©plac√© vers {target_dir.name}: {media_path.name} ‚Üí {new_media_path.name}")
            else:
                new_media_path = None
                logger.warning(f"Fichier m√©dia introuvable pour d√©placement: {media_path}")
            
            # D√©placer le sidecar
            if sidecar_path.exists():
                shutil.move(str(sidecar_path), str(new_sidecar_path))
                logger.debug(f"Sidecar d√©plac√©: {sidecar_path.name} ‚Üí {new_sidecar_path.name}")
            else:
                new_sidecar_path = None
                logger.warning(f"Sidecar introuvable pour d√©placement: {sidecar_path}")
            
            return new_media_path, new_sidecar_path
            
        except (OSError, shutil.Error) as e:
            logger.error(f"Erreur lors du d√©placement de {media_path.name}: {e}")
            raise
    
    def _resolve_name_conflict(self, target_path: Path) -> Path:
        """
        R√©soudre les conflits de noms en ajoutant un suffixe num√©rique.
        
        Args:
            target_path: Chemin cible souhait√©
            
        Returns:
            Chemin disponible (avec suffixe si n√©cessaire)
        """
        if not target_path.exists():
            return target_path
        
        # G√©n√©rer un nom alternatif avec suffixe num√©rique
        stem = target_path.stem
        suffix = target_path.suffix
        parent = target_path.parent
        
        counter = 1
        while True:
            new_name = f"{stem}_{counter}{suffix}"
            new_path = parent / new_name
            if not new_path.exists():
                logger.debug(f"Conflit de nom r√©solu: {target_path.name} ‚Üí {new_name}")
                return new_path
            counter += 1
            
            # S√©curit√©: √©viter les boucles infinies
            if counter > 1000:
                raise OSError(f"Impossible de r√©soudre le conflit de nom pour {target_path}")


def should_organize_file(meta: SidecarData) -> bool:
    """
    V√©rifier si un fichier doit √™tre organis√© selon son statut.
    
    Args:
        meta: M√©tadonn√©es du fichier
        
    Returns:
        True si le fichier doit √™tre d√©plac√©
    """
    return meta.trashed or meta.archived or meta.locked


def get_organization_status(meta: SidecarData) -> str:
    """
    Obtenir le statut d'organisation d'un fichier.
    
    Args:
        meta: M√©tadonn√©es du fichier
        
    Returns:
        String d√©crivant le statut ("trashed", "archived", "locked", "normal")
    """
    if meta.trashed:
        return "trashed"
    elif meta.locked:
        return "locked"
    elif meta.archived:
        return "archived"
    else:
        return "normal"
