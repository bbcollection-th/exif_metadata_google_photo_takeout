Metadata-Version: 2.4
Name: google_takeout_metadata
Version: 0.1.0
Summary: Merge Google Takeout metadata into images
Author-email: Anthony <anthony@example.com>
License: MIT License
        
        Copyright (c) 2025 bbcollection
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pillow; extra == "test"
Dynamic: license-file

# exif_metadata_google_photo_takeout

Ce projet permet d'incorporer les m√©tadonn√©es des fichiers JSON produits par Google Takeout dans les photos correspondantes.

## Fonctionnalit√©s

‚úÖ **M√©tadonn√©es support√©es:**
- Descriptions/l√©gendes
- Personnes identifi√©es (avec d√©duplication automatique)
- Dates de prise de vue et de cr√©ation
- Coordonn√©es GPS (filtrage automatique des coordonn√©es 0/0 peu fiables)
- Favoris (mapp√©s sur le tag Favorite bool√©en)
- **Albums** (d√©tect√©s depuis les fichiers metadata.json de dossier et ajout√©s comme mots-cl√©s "Album: <nom>")

‚úÖ **Mode de fonctionnement s√ªr par d√©faut:**
- **Append-only par d√©faut**: Les m√©tadonn√©es existantes sont pr√©serv√©es
- Les descriptions ne sont √©crites que si elles n'existent pas d√©j√†
- Les personnes et albums sont ajout√©s aux listes existantes sans suppression
- **Mode s√©curis√© des sidecars**: Par d√©faut, les sidecars JSON sont marqu√©s avec le pr√©fixe "OK_" apr√®s traitement r√©ussi
- Utiliser `--overwrite` pour forcer l'√©crasement des m√©tadonn√©es existantes
- Utiliser `--immediate-delete` pour supprimer imm√©diatement les sidecars (mode destructeur)

‚úÖ **Options avanc√©es:**
- `--localtime`: Conversion des timestamps en heure locale au lieu d'UTC
- `--overwrite`: Force l'√©crasement des m√©tadonn√©es existantes (mode destructif)
- `--immediate-delete`: Mode destructeur - supprime imm√©diatement les sidecars JSON apr√®s succ√®s
- `--batch`: Mode batch pour traitement optimis√© de gros volumes de fichiers
- `--organize-files`: Organisation automatique des fichiers selon leur statut archived/trashed

‚úÖ **Qualit√©:**
- Tests unitaires complets
- Tests d'int√©gration E2E avec exiftool
- Support des formats photo et vid√©o
- **Arguments s√©curis√©s** : Protection contre l'injection shell avec noms contenant des espaces
- **Op√©rateur `+=` optimis√©** : Utilise l'op√©rateur exiftool `+=` pour accumulation s√ªre des tags de type liste

## Installation

Pr√©requis: `exiftool` doit √™tre install√© et accessible dans le PATH.

```bash
pip install -e .
```

## Utilisation

### Utilisation basique (mode s√ªr par d√©faut)
```bash
# Mode append-only par d√©faut - pr√©serve les m√©tadonn√©es existantes
google-takeout-metadata /chemin/vers/le/dossier
```

### Avec options
```bash
# Utiliser l'heure locale pour les timestamps
google-takeout-metadata --localtime /chemin/vers/le/dossier

# Mode destructif: √©craser les m√©tadonn√©es existantes (√† utiliser avec pr√©caution)
google-takeout-metadata --overwrite /chemin/vers/le/dossier

# Mode destructeur: supprimer les sidecars imm√©diatement apr√®s traitement
google-takeout-metadata --immediate-delete /chemin/vers/le/dossier

# Organisation automatique des fichiers selon leur statut
google-takeout-metadata --organize-files /chemin/vers/le/dossier

# Combiner les options (mode s√ªr avec heure locale)
google-takeout-metadata --localtime /chemin/vers/le/dossier

# Exemple complet avec toutes les options utiles
google-takeout-metadata --batch --localtime --organize-files /chemin/vers/le/dossier
```

### Mode batch (optimis√© pour gros volumes)
```bash
# Mode batch: traitement optimis√© pour de nombreux fichiers
google-takeout-metadata --batch /chemin/vers/le/dossier

# Mode batch avec autres options
google-takeout-metadata --batch --localtime /chemin/vers/le/dossier
google-takeout-metadata --batch --overwrite /chemin/vers/le/dossier

# Exemple concret avec toutes les options (pointer vers le dossier Takeout)
google-takeout-metadata --batch --localtime --immediate-delete "C:\Users\anthony\Downloads\google photos\Takeout"
```

**Si la commande `google-takeout-metadata` n'est pas trouv√©e:**
```bash
# Option 1: Utiliser le module Python directement (attention aux underscores)
python -m google_takeout_metadata --batch --localtime --immediate-delete "/chemin/vers/dossier"

# Option 2: Utiliser l'environnement virtuel complet avec le module
C:/Users/anthony/Documents/PROJETS/exif_metadata_google_photo_takeout/.venv/Scripts/python.exe -m google_takeout_metadata --batch --localtime --immediate-delete "C:\Users\anthony\Downloads\google photos\Takeout"

# Option 3: Utiliser l'ex√©cutable directement depuis l'environnement virtuel
C:/Users/anthony/Documents/PROJETS/exif_metadata_google_photo_takeout/.venv/Scripts/google-takeout-metadata.exe --batch --localtime --immediate-delete "C:\Users\anthony\Downloads\google photos\Takeout"

# Option 4: Activer l'environnement virtuel d'abord
.venv/Scripts/activate  # Sur Windows
google-takeout-metadata --batch --localtime --immediate-delete "/chemin/vers/dossier"
```

**Avantages du mode batch:**
- **Performance am√©lior√©e** : Traitement par lots avec exiftool pour r√©duire le nombre d'appels syst√®me
- **Id√©al pour gros volumes** : Optimis√© pour traiter des milliers de fichiers
- **Moins de fragmentation** : R√©duit la charge syst√®me en groupant les op√©rations
- **M√™me s√©curit√©** : Conserve le comportement append-only par d√©faut

**Quand utiliser le mode batch:**
- Traitement de biblioth√®ques photo importantes (>100 fichiers)
- Archives Google Takeout volumineuses
- Situations o√π la performance est critique

**Note de performance:**
Le mode batch r√©duit significativement le temps de traitement en groupant les appels √† exiftool. 
Pour 1000 fichiers, le gain peut √™tre de 50-80% selon la configuration syst√®me.

## Organisation automatique des fichiers

**Nouvelle fonctionnalit√©** : Organisation automatique des fichiers selon leur statut dans Google Takeout.

```bash
# Activer l'organisation automatique
google-takeout-metadata --organize-files /chemin/vers/le/dossier

# Combiner avec d'autres options
google-takeout-metadata --batch --organize-files --localtime /chemin/vers/le/dossier
```

### üìÅ Fonctionnement:

**Statuts d√©tect√©s** dans les sidecars JSON Google Takeout:
- `"archived": true` ‚Üí Fichier d√©plac√© vers `archive/`
- `"trashed": true` ‚Üí Fichier d√©plac√© vers `corbeille/`
- **Priorit√©** : Si un fichier a `archived: true` ET `trashed: true`, le statut `trashed` l'emporte

**Structure cr√©√©e automatiquement:**
```
dossier_source/
‚îú‚îÄ‚îÄ archive/          # Fichiers avec "archived": true
‚îú‚îÄ‚îÄ corbeille/        # Fichiers avec "trashed": true  
‚îî‚îÄ‚îÄ autres_fichiers   # Fichiers sans statut sp√©cial
```

### üîí S√©curit√©:

- **Gestion des conflits** : Si un fichier existe d√©j√† dans le dossier de destination, un suffixe num√©rique est ajout√©
- **D√©placement avec sidecar** : Le fichier JSON correspondant est d√©plac√© avec le fichier m√©dia
- **Pr√©servation** : Tous les fichiers sont d√©plac√©s, jamais supprim√©s
- **Logs d√©taill√©s** : Information sur chaque d√©placement effectu√©

### ‚öôÔ∏è Avantages:

- **Nettoyage automatique** : S√©pare automatiquement les fichiers archiv√©s et supprim√©s
- **Pr√©servation de l'historique** : Les fichiers "trash√©s" restent accessibles dans `corbeille/`
- **Workflow Google Takeout** : Respecte parfaitement la logique de statut de Google Photos
- **Combinable** : Fonctionne avec toutes les autres options (batch, localtime, etc.)

**Exemple concret:**
```bash
# Traitement complet d'un export Google Takeout avec organisation
google-takeout-metadata --batch --localtime --organize-files "C:\Downloads\Takeout\Google Photos"
```

Le programme parcourt r√©cursivement le dossier, cherche les fichiers `*.json` et √©crit les informations pertinentes dans les fichiers image correspondants √† l'aide d'`exiftool`.

## Comportement par d√©faut (S√©curis√©)

**Le mode append-only est d√©sormais activ√© par d√©faut** pour √©viter la perte accidentelle de m√©tadonn√©es:

### ‚úÖ M√©tadonn√©es pr√©serv√©es:
- **Descriptions existantes** ne sont jamais √©cras√©es
- **Dates existantes** ne sont jamais modifi√©es
- **Coordonn√©es GPS existantes** ne sont jamais remplac√©es
- **Ratings existants** ne sont jamais chang√©s

### ‚úÖ M√©tadonn√©es ajout√©es:
- **Personnes** sont ajout√©es aux listes existantes avec d√©duplication intelligente
- **Albums** sont ajout√©s aux mots-cl√©s existants avec d√©duplication intelligente

### üîß D√©duplication intelligente:
**Nouvelle fonctionnalit√©** : Le syst√®me √©vite automatiquement les doublons dans les tags de liste.

- **Normalisation des noms** : "anthony vincent" et "Anthony Vincent" sont reconnus comme identiques
- **Gestion des cas sp√©ciaux** : Support intelligent pour "McDonald", "O'Connor", "van der Berg", etc.
- **Approche robuste** : Utilise la strat√©gie "supprimer puis ajouter" (-TAG-=val -TAG+=val) pour garantir z√©ro doublon final
- **Performance optimis√©e** : Logs -efile pour reprises intelligentes en cas d'interruption
- **Gestion des `-wm cg`** : Logic group√©e pour optimiser les arguments ExifTool en mode append-only

### ‚ö†Ô∏è Mode destructif:
Utilisez `--overwrite` seulement si vous voulez explicitement √©craser les m√©tadonn√©es existantes.

### üîê Gestion des sidecars JSON:
**Mode s√©curis√© par d√©faut** : Les sidecars sont pr√©serv√©s avec un pr√©fixe apr√®s traitement r√©ussi.

- **Mode s√©curis√©** (d√©faut) : Les sidecars sont renomm√©s avec le pr√©fixe "OK_" apr√®s succ√®s
- **Mode destructeur** (`--immediate-delete`) : Les sidecars sont supprim√©s imm√©diatement apr√®s traitement r√©ussi
- **S√©curit√©** : En cas d'erreur, les sidecars restent intacts pour permettre de retenter
- **Tra√ßabilit√©** : Les fichiers "OK_" permettent de voir quels sidecars ont √©t√© trait√©s avec succ√®s

## D√©tails techniques

### Op√©rateur exiftool `+=` pour les listes
Notre impl√©mentation utilise l'op√©rateur `+=` d'exiftool pour une gestion s√ªre des tags de type liste :

```bash
# ‚úÖ Correct : L'op√©rateur += ajoute ET cr√©e le tag si n√©cessaire
exiftool "-XMP-iptcExt:PersonInImage+=John Doe" photo.jpg

# ‚ùå Incorrect : L'op√©rateur += seul ne cr√©e pas un tag inexistant
# (ancien comportement qui √©chouait)
```

**Avantages de notre approche :**
- **Cr√©ation automatique** : `+=` cr√©e le tag s'il n'existe pas
- **Accumulation s√ªre** : Ajoute aux listes existantes sans duplication
- **S√©curit√©** : Arguments s√©par√©s pr√©viennent l'injection shell avec espaces
- **Mode overwrite** : Vide explicitement puis reremplit avec `+=`
- **Logic `-wm cg` optimis√©e** : Arguments group√©s pour √©viter la fragmentation des param√®tres

### Format Google Takeout support√©
```json
{
  "title": "IMG_20240716_200232.jpg",
  "description": "Description de la photo",
  "photoTakenTime": {"timestamp": "1721152952"},
  "creationTime": {"timestamp": "1721152952"},
  "geoData": {
    "latitude": 48.8566,
    "longitude": 2.3522,
    "altitude": 35.0
  },
  "people": [
    {"name": "John Doe"},
    {"name": "Jane Smith"}
  ],
  "favorited": true,
  "archived": false,
  "trashed": false
}
```

**Champs support√©s pour l'organisation des fichiers:**
- `archived`: D√©place le fichier vers le dossier `archive/` si `true`
- `trashed`: D√©place le fichier vers le dossier `corbeille/` si `true` (priorit√© sur `archived`)
```

## Tests

```bash
# Tests unitaires
pytest tests/ -m "not integration"

# Tests complets (n√©cessite exiftool)
pytest tests/

# Tests d'int√©gration uniquement
pytest tests/ -m "integration"
```

Les tests comprennent:
- **Tests unitaires**: Parsing des sidecars, g√©n√©ration des arguments exiftool
- **Tests d'int√©gration**: √âcriture et relecture effective des m√©tadonn√©es avec exiftool
- **Tests du mode batch**: V√©rification des performances et de la compatibilit√© du traitement par lots
- **Tests CLI**: Validation de l'interface en ligne de commande et de toutes les options
- **Tests de l'approche robuste**: Validation de la d√©duplication et de la logique "supprimer puis ajouter"
- **Tests P1**: V√©rification du fix pour l'√©crasement des timestamps en mode append-only
- **Tests d'organisation**: Validation du d√©placement automatique des fichiers archived/trashed
